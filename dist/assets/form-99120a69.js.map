{"version":3,"file":"form-99120a69.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs","../../src/components/ui/form.tsx"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange: (event) => _registerProps.current.onChange({\n            target: {\n                value: getEventValue(event),\n                name: name,\n            },\n            type: EVENTS.CHANGE,\n        }),\n        onBlur: () => _registerProps.current.onBlur({\n            target: {\n                value: get(control._formValues, name),\n                name: name,\n            },\n            type: EVENTS.BLUR,\n        }),\n        ref: (elm) => {\n            const field = get(control._fields, name);\n            if (field && elm) {\n                field._f.ref = {\n                    focus: () => elm.focus(),\n                    select: () => elm.select(),\n                    setCustomValidity: (message) => elm.setCustomValidity(message),\n                    reportValidity: () => elm.reportValidity(),\n                };\n            }\n        },\n    }), [\n        name,\n        control._formValues,\n        disabled,\n        formState.disabled,\n        value,\n        control._fields,\n    ]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._updateDisabledField({\n            disabled,\n            fields: control._fields,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            const disabledField = !!(get(_fields, name) &&\n                get(_fields, name)._f &&\n                get(_fields, name)._f.disabled);\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n                isCurrentFieldPristine || disabledField\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.dirtyFields &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            (_proxyFormState.touchedFields &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (_options.mode === 'onBlur' && isBlurEvent) {\n                        _updateValid();\n                    }\n                    else if (!isBlurEvent) {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n            updateTouchAndDirty(name, getFieldValue(field ? field._f : get(fields, name)._f), false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message) : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","isFileListInstance","key","compact","isUndefined","val","get","object","path","defaultValue","result","isBoolean","isKey","stringToPath","input","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","FormProvider","props","children","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","_proxyFormState","updateFormState","convertToArrayPayload","shouldSubscribeByName","signalName","exact","currentName","useSubscribe","_props","subscription","useFormState","methods","disabled","_mounted","_localProxyFormState","_name","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","useWatch","updateValue","useController","shouldUnregister","isArrayField","_registerProps","fieldState","field","elm","message","_shouldUnregisterField","updateMounted","Controller","appendErrors","validateAllFieldCriteria","errors","type","getValidationModes","mode","isWatched","isBlurEvent","watchName","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","_f","currentField","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","isMessage","isRadioInput","isRegex","defaultResult","validResult","getCheckboxValue","options","values","option","defaultReturn","getRadioValue","previous","getValidateError","ref","getValueAndMessage","validationData","validateField","disabledFieldNames","shouldUseNativeValidation","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isMultipleSelect","live","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","valueAsDate","setValueAs","getFieldValue","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_updateValid","shouldUpdateValid","isValid","_executeSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","onChange","target","isFieldValueUpdated","getCurrentFieldValue","_updateIsFieldValueUpdated","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_updateDisabledField","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","form","reset","useForm","_formControl","_values","isDirty","state","Form","FormFieldContext","React.createContext","FormField","jsx","useFormField","fieldContext","React.useContext","itemContext","FormItemContext","id","FormItem","React.forwardRef","className","React.useId","cn","FormLabel","formItemId","Label","FormControl","formDescriptionId","formMessageId","Slot","FormDescription","FormMessage","body"],"mappings":"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","x_google_ignoreList":[0]}