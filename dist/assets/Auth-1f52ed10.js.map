{"version":3,"file":"Auth-1f52ed10.js","sources":["../../node_modules/lucide-react/dist/esm/icons/arrow-left.js","../../src/hooks/useAuth.ts","../../src/components/auth/SignInForm.tsx","../../src/components/auth/SignUpForm.tsx","../../src/components/auth/ForgotPasswordForm.tsx","../../src/components/auth/ResetPasswordForm.tsx","../../src/pages/Auth.tsx"],"sourcesContent":["/**\n * lucide-react v0.292.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowLeft = createLucideIcon(\"ArrowLeft\", [\n  [\"path\", { d: \"m12 19-7-7 7-7\", key: \"1l729n\" }],\n  [\"path\", { d: \"M19 12H5\", key: \"x3x0zl\" }]\n]);\n\nexport { ArrowLeft as default };\n//# sourceMappingURL=arrow-left.js.map\n","import { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { useNavigate } from 'react-router-dom';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport function useAuth() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Vérifier la session actuelle\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    // Écouter les changements d'auth\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser(session?.user ?? null);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) throw error;\n    navigate('/dashboard');\n  };\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n    navigate('/');\n  };\n\n  return {\n    user,\n    loading,\n    signIn,\n    signOut,\n  };\n}\n","import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { toast } from \"@/components/ui/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface SignInFormProps {\n  onForgotPasswordClick: () => void;\n}\n\nexport function SignInForm({ onForgotPasswordClick }: SignInFormProps) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const { signIn } = useAuth();\n\n  const validateEmail = (email: string) => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateEmail(email)) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez entrer une adresse email valide\"\n      });\n      return;\n    }\n\n    if (!password) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez entrer votre mot de passe\"\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await signIn(email, password);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur de connexion\",\n        description: \"Email ou mot de passe incorrect\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Connexion</CardTitle>\n        <CardDescription>\n          Connectez-vous pour accéder à votre compte\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSignIn} className=\"space-y-4\" role=\"form\">\n          <div className=\"space-y-2\">\n            <FormLabel htmlFor=\"email\">Email</FormLabel>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"exemple@email.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <FormLabel htmlFor=\"password\">Mot de passe</FormLabel>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"••••••••\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={loading}\n          >\n            {loading ? \"Connexion...\" : \"Se connecter\"}\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"link\"\n            className=\"w-full\"\n            onClick={onForgotPasswordClick}\n          >\n            Mot de passe oublié ?\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { toast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface SignUpFormProps {\n  onSuccess: () => void;\n}\n\nexport default function SignUpForm({ onSuccess }: SignUpFormProps) {\n  const { signUp } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  const validateEmail = (email: string) => {\n    return email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n  };\n\n  const validatePassword = (password: string) => {\n    const minLength = 6;\n    const hasUpperCase = /[A-Z]/.test(password);\n    \n    const errors = [];\n    if (password.length < minLength) {\n      errors.push(`Le mot de passe doit contenir au moins ${minLength} caractères`);\n    }\n    if (!hasUpperCase) {\n      errors.push(\"Le mot de passe doit contenir au moins une majuscule\");\n    }\n    \n    return errors;\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email || !password || !firstName || !lastName) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez remplir tous les champs\",\n      });\n      return;\n    }\n\n    if (!validateEmail(email)) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez entrer une adresse email valide\",\n      });\n      return;\n    }\n\n    const passwordErrors = validatePassword(password);\n    if (passwordErrors.length > 0) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Le mot de passe doit contenir au moins 6 caractères et une majuscule\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await signUp(email, password, firstName, lastName);\n      // Si l'inscription réussit, on réinitialise les champs\n      setEmail(\"\");\n      setPassword(\"\");\n      setFirstName(\"\");\n      setLastName(\"\");\n      setShowConfirmDialog(true);\n    } catch (error: any) {\n      if (error.message.includes('rate limit')) {\n        toast({\n          variant: \"destructive\",\n          title: \"Erreur\",\n          description: \"Trop de tentatives. Veuillez réessayer plus tard.\",\n        });\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Erreur\",\n          description: error.message || \"Une erreur est survenue lors de l'inscription\",\n        });\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleConfirmation = () => {\n    setShowConfirmDialog(false);\n    onSuccess();\n  };\n\n  return (\n    <>\n      <Card className=\"w-full\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Inscription</CardTitle>\n          <CardDescription>\n            Créez votre compte pour commencer à réserver des sessions\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSignUp} role=\"form\">\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"signup-firstname\">Prénom</Label>\n              <Input\n                id=\"signup-firstname\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                disabled={loading}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"signup-lastname\">Nom</Label>\n              <Input\n                id=\"signup-lastname\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                disabled={loading}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"signup-email\">Email</Label>\n              <Input\n                id=\"signup-email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={loading}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"signup-password\">Mot de passe</Label>\n                <span className=\"text-sm text-muted-foreground\">\n                  (6 caractères et 1 majuscule minimum)\n                </span>\n              </div>\n              <Input\n                id=\"signup-password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={loading}\n                required\n              />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? \"Inscription...\" : \"S'inscrire\"}\n            </Button>\n          </CardFooter>\n        </form>\n      </Card>\n\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Vérifiez votre boîte mail</AlertDialogTitle>\n            <AlertDialogDescription>\n              Un email de confirmation vous a été envoyé. Veuillez cliquer sur le lien dans l'email pour activer votre compte.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogAction onClick={handleConfirmation}>Compris</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/lib/supabase/supabase-client\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface ForgotPasswordFormProps {\n  onBack: () => void;\n}\n\nexport default function ForgotPasswordForm({ onBack }: ForgotPasswordFormProps) {\n  const [email, setEmail] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [lastResetAttempt, setLastResetAttempt] = useState(0);\n\n  const validateEmail = (email: string) => {\n    return email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez entrer votre adresse email\",\n      });\n      return;\n    }\n\n    if (!validateEmail(email)) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez entrer une adresse email valide\",\n      });\n      return;\n    }\n\n    const now = Date.now();\n    if (now - lastResetAttempt < 60000) { // 1 minute d'attente\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez patienter une minute avant de réessayer\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/reset-password`,\n      });\n\n      if (error) {\n        if (error.message.includes('rate limit')) {\n          throw new Error(\"Trop de tentatives. Veuillez réessayer plus tard.\");\n        }\n        throw error;\n      }\n\n      setLastResetAttempt(now);\n      toast({\n        title: \"Email envoyé\",\n        description: \"Si un compte existe avec cette adresse email, vous recevrez un lien de réinitialisation.\",\n      });\n      \n      // Retour à la page de connexion après 2 secondes\n      setTimeout(() => {\n        onBack();\n      }, 2000);\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Une erreur est survenue lors de l'envoi de l'email\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <Button \n          variant=\"ghost\" \n          className=\"w-fit h-fit p-0 mb-4\" \n          onClick={onBack}\n        >\n          <ArrowLeft className=\"h-5 w-5 mr-2\" />\n          Retour\n        </Button>\n        <CardTitle>Mot de passe oublié</CardTitle>\n        <CardDescription>\n          Entrez votre adresse email pour recevoir un lien de réinitialisation\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\" role=\"form\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"reset-email\">Email</Label>\n            <Input\n              id=\"reset-email\"\n              type=\"email\"\n              placeholder=\"exemple@email.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={loading}\n              required\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n            {loading ? \"Envoi en cours...\" : \"Envoyer le lien\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/lib/supabase/supabase-client\";\n\nexport default function ResetPasswordForm() {\n  const navigate = useNavigate();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isLinkExpired, setIsLinkExpired] = useState(false);\n\n  useEffect(() => {\n    const checkResetToken = async () => {\n      const hash = window.location.hash;\n      if (!hash) {\n        setIsLinkExpired(true);\n        return;\n      }\n\n      try {\n        const accessToken = hash.split('=')[1];\n        const { error } = await supabase.auth.getUser(accessToken);\n        \n        if (error) {\n          setIsLinkExpired(true);\n          toast({\n            variant: \"destructive\",\n            title: \"Lien expiré\",\n            description: \"Ce lien de réinitialisation n'est plus valide. Veuillez en demander un nouveau.\",\n          });\n        }\n      } catch (error) {\n        setIsLinkExpired(true);\n      }\n    };\n\n    checkResetToken();\n  }, []);\n\n  const handleRequestNewLink = () => {\n    navigate(\"/auth\", { state: { showForgotPassword: true } });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!password || !confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Veuillez remplir tous les champs\",\n      });\n      return;\n    }\n\n    const minLength = 6;\n    const hasUpperCase = /[A-Z]/.test(password);\n    \n    if (password.length < minLength || !hasUpperCase) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Le mot de passe doit contenir au moins 6 caractères et une majuscule\",\n      });\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Les mots de passe ne correspondent pas\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password: password\n      });\n\n      if (error) {\n        if (error.message.includes('rate limit')) {\n          throw new Error(\"Trop de tentatives. Veuillez réessayer plus tard.\");\n        }\n        throw error;\n      }\n\n      toast({\n        title: \"Succès\",\n        description: \"Votre mot de passe a été mis à jour. Vous allez être redirigé vers la page de connexion.\",\n      });\n\n      setTimeout(() => {\n        navigate(\"/auth\");\n      }, 2000);\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Une erreur est survenue lors de la mise à jour du mot de passe\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (isLinkExpired) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl\">Lien expiré</CardTitle>\n          <CardDescription>\n            Ce lien de réinitialisation n'est plus valide. Vous pouvez demander un nouveau lien pour réinitialiser votre mot de passe.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button \n            onClick={handleRequestNewLink}\n            className=\"w-full\"\n          >\n            Demander un nouveau lien\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl\">Réinitialisation du mot de passe</CardTitle>\n        <CardDescription>\n          Choisissez un nouveau mot de passe pour votre compte\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} role=\"form\" className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"new-password\">Nouveau mot de passe</Label>\n              <span className=\"text-sm text-muted-foreground\">\n                (6 caractères et 1 majuscule minimum)\n              </span>\n            </div>\n            <Input\n              id=\"new-password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              disabled={loading}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirm-password\">Confirmer le mot de passe</Label>\n            <Input\n              id=\"confirm-password\"\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              disabled={loading}\n              required\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n            {loading ? \"Mise à jour...\" : \"Mettre à jour le mot de passe\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { SignInForm } from \"@/components/auth/SignInForm\";\nimport SignUpForm from \"@/components/auth/SignUpForm\";\nimport ForgotPasswordForm from \"@/components/auth/ForgotPasswordForm\";\nimport ResetPasswordForm from \"@/components/auth/ResetPasswordForm\";\n\nexport default function Auth() {\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"signin\");\n  const navigate = useNavigate();\n\n  // Vérifier si on est sur la page de réinitialisation de mot de passe\n  const isResetPasswordPage = window.location.pathname.includes(\"reset-password\");\n\n  if (isResetPasswordPage) {\n    return (\n      <div className=\"flex min-h-[calc(100vh-4rem)] items-center justify-center p-4 md:p-8\">\n        <div className=\"w-full max-w-md\">\n          <ResetPasswordForm />\n        </div>\n      </div>\n    );\n  }\n\n  const handleForgotPassword = () => {\n    setShowForgotPassword(true);\n  };\n\n  const handleBackToSignIn = () => {\n    setShowForgotPassword(false);\n  };\n\n  const handleAuthSuccess = () => {\n    navigate(\"/\");\n  };\n\n  if (showForgotPassword) {\n    return (\n      <div className=\"flex min-h-[calc(100vh-4rem)] items-center justify-center p-4 md:p-8\">\n        <div className=\"w-full max-w-md\">\n          <ForgotPasswordForm onBack={handleBackToSignIn} />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-[calc(100vh-4rem)] items-center justify-center p-4 md:p-8\">\n      <div className=\"w-full max-w-md\">\n        <Tabs\n          defaultValue={activeTab}\n          onValueChange={setActiveTab}\n          className=\"w-full\"\n        >\n          <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n            <TabsTrigger value=\"signin\">Connexion</TabsTrigger>\n            <TabsTrigger value=\"signup\">Inscription</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"signin\" className=\"mt-0\">\n            <SignInForm onForgotPasswordClick={handleForgotPassword} />\n          </TabsContent>\n          <TabsContent value=\"signup\" className=\"mt-0\">\n            <SignUpForm onSuccess={() => setActiveTab(\"signin\")} />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n"],"names":["ArrowLeft","createLucideIcon","supabaseUrl","supabaseAnonKey","supabase","createClient","useAuth","user","setUser","useState","loading","setLoading","navigate","useNavigate","useEffect","session","subscription","_event","email","password","error","SignInForm","onForgotPasswordClick","setEmail","setPassword","signIn","validateEmail","handleSignIn","e","toast","Card","jsxs","CardHeader","jsx","CardTitle","CardDescription","CardContent","FormLabel","Input","Button","SignUpForm","onSuccess","signUp","firstName","setFirstName","lastName","setLastName","showConfirmDialog","setShowConfirmDialog","validatePassword","hasUpperCase","errors","handleSignUp","handleConfirmation","Fragment","Label","CardFooter","AlertDialog","AlertDialogContent","AlertDialogHeader","AlertDialogTitle","AlertDialogDescription","AlertDialogFooter","AlertDialogAction","ForgotPasswordForm","onBack","lastResetAttempt","setLastResetAttempt","handleSubmit","now","ResetPasswordForm","confirmPassword","setConfirmPassword","isLinkExpired","setIsLinkExpired","hash","accessToken","handleRequestNewLink","minLength","Auth","showForgotPassword","setShowForgotPassword","activeTab","setActiveTab","handleForgotPassword","handleBackToSignIn","Tabs","TabsList","TabsTrigger","TabsContent"],"mappings":"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","x_google_ignoreList":[0]}